df |>
ggplot() +
geom_point(aes(x = Year, y = TPM)) +
labs(title = "Moore's Law",
subtitle = "said that the number of transistors in an integrated\n
circuit doubles approximately every two years",
caption = "Data Source: Our World in Data",
x = "year", y = "transistors per microprocessor")
df |>
ggplot() +
geom_point(aes(x = Year, y = TPM)) +
labs(title = "Moore's Law",
subtitle = "said that the number of transistors in an integrated\n
circuit doubles approximately every two years",
caption = "Data Source: Our World in Data",
x = "year", y = "transistors per microprocessor") +
theme(#axis.text.x = element_blank(),
#axis.text.y = element_blank(),
#axis.ticks = element_blank(),
legend.position = "bottom",
panel.background = element_rect(fill = alpha("#23ADAD", 0.5)),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.subtitle = element_text(color = "blue",
hjust = 0.5,
size = 15),
plot.title = element_text(color = "red",
hjust = 0.5,
size = 20))
df |>
ggplot() +
geom_point(aes(x = Year, y = TPM),
size = 4) +
labs(title = "Moore's Law",
subtitle = "said that the number of transistors in an integrated\n
circuit doubles approximately every two years",
caption = "Data Source: Our World in Data",
x = "year", y = "transistors per microprocessor") +
theme(#axis.text.x = element_blank(),
#axis.text.y = element_blank(),
#axis.ticks = element_blank(),
legend.position = "bottom",
panel.background = element_rect(fill = alpha("#23ADAD", 0.5)),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.subtitle = element_text(color = "blue",
hjust = 0.5,
size = 15),
plot.title = element_text(color = "red",
hjust = 0.5,
size = 20))
baseplot <- df |>
ggplot() +
geom_point(aes(x = Year, y = TPM),
size = 4) +
labs(title = "Moore's Law",
subtitle = "said that the number of transistors in an integrated\n
circuit doubles approximately every two years",
caption = "Data Source: Our World in Data",
x = "year", y = "transistors per microprocessor") +
theme(#axis.text.x = element_blank(),
#axis.text.y = element_blank(),
#axis.ticks = element_blank(),
legend.position = "bottom",
panel.background = element_rect(fill = alpha("#23ADAD", 0.5)),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.subtitle = element_text(color = "blue",
hjust = 0.5,
size = 15),
plot.title = element_text(color = "red",
hjust = 0.5,
size = 20))
baseplot
baseplot <- df |>
ggplot() +
geom_point(aes(x = Year, y = TPM),
size = 4) +
labs(title = "Moore's Law",
subtitle = "said that the number of transistors in an integrated\n
circuit doubles approximately every two years",
caption = "Data Source: Our World in Data",
x = "year", y = "transistors per microprocessor") +
theme(#axis.text.x = element_blank(),
#axis.text.y = element_blank(),
#axis.ticks = element_blank(),
legend.position = "bottom",
panel.background = element_rect(fill = alpha("gray10", 0.5)),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.subtitle = element_text(color = "blue",
hjust = 0.5,
size = 15),
plot.title = element_text(color = "red",
hjust = 0.5,
size = 20))
baseplot
baseplot <- df |>
ggplot() +
geom_point(aes(x = Year, y = TPM),
size = 4) +
labs(title = "Moore's Law",
subtitle = "said that the number of transistors in an integrated\n
circuit doubles approximately every two years",
caption = "Data Source: Our World in Data",
x = "year", y = "transistors per microprocessor") +
theme(#axis.text.x = element_blank(),
#axis.text.y = element_blank(),
#axis.ticks = element_blank(),
legend.position = "bottom",
panel.background = element_rect(fill = alpha("gray90", 0.5)),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.subtitle = element_text(color = "blue",
hjust = 0.5,
size = 15),
plot.title = element_text(color = "red",
hjust = 0.5,
size = 20))
baseplot
baseplot +
geom_smooth(method = "lm")
baseplot <- df |>
ggplot(aes(x = Year, y = TPM)) +
geom_point(size = 4) +
labs(title = "Moore's Law",
subtitle = "said that the number of transistors in an integrated\n
circuit doubles approximately every two years",
caption = "Data Source: Our World in Data",
x = "year", y = "transistors per microprocessor") +
theme(#axis.text.x = element_blank(),
#axis.text.y = element_blank(),
#axis.ticks = element_blank(),
legend.position = "bottom",
panel.background = element_rect(fill = alpha("gray90", 0.5)),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.subtitle = element_text(color = "blue",
hjust = 0.5,
size = 15),
plot.title = element_text(color = "red",
hjust = 0.5,
size = 20))
baseplot +
geom_smooth(method = "lm")
?geom_smooth
lin_fit <- lm(TPM ~ Year, data = df)
summary(lin_fit)
summary(lin_fit)$adj.r.squared
baseplot +
geom_smooth(method = "lm")
lin_fit <- lm(TPM ~ Year, data = df)
summary(lin_fit)
d2_fit <- lm(TPM ~ poly(Year, 2), data = df)
d2_fit <- lm(TPM ~ poly(Year, 2), data = df) #degree 2 polynomial
d3_fit <- lm(TPM ~ poly(Year, 3), data = df) #degree 3 polynomial
baseplot +
geom_smooth(formula = y ~ poly(x,2))
baseplot +
geom_smooth(formula = y ~ poly(x,3))
baseplot +
geom_smooth(formula = y ~ poly(x,2), se = FALSE)
baseplot +
geom_smooth(formula = y ~ poly(x,3), se = FALSE)
exp_fit <- lm(log(TPM) ~ x)
exp_fit <- lm(log(TPM) ~ x, data = df)
exp_fit <- lm(log(TPM) ~ Year, data = df)
baseplot +
geom_smooth(formula = y ~ poly(x,3), se = FALSE)
summary(exp_fit)
summary(d2_fit)
summary(d3_fit)
baseplot +
geom_smooth(formula = log(y) ~ x, se = FALSE)
baseplot +
geom_smooth(formula = y ~ log(x), se = FALSE)
exp_fit <- lm(TPM ~ log(Year), data = df)
summary(exp_fit)
exp_fit <- lm(log(TPM) ~ Year, data = df)
summary(exp_fit)
print("The coefficient for determination of the linear model is")
summary(lin_fit)$adj.r.squared
print("The coefficient for determination of the linear model is")
summary(lin_fit)$adj.r.squared
print("The coefficient for determination of the degree 2 model is")
summary(lin_fit)$adj.r.squared
print("The coefficient for determination of the degree 3 model is")
summary(lin_fit)$adj.r.squared
print("The coefficient for determination of the linear model is")
summary(lin_fit)$adj.r.squared
print("The coefficient for determination of the degree 2 model is")
summary(d2_fit)$adj.r.squared
print("The coefficient for determination of the degree 3 model is")
summary(d3_fit)$adj.r.squared
print("The coefficient for determination of the linear model is")
summary(lin_fit)$adj.r.squared
print("The coefficient for determination of the degree 2 model is")
summary(d2_fit)$adj.r.squared
print("The coefficient for determination of the degree 3 model is")
summary(d3_fit)$adj.r.squared
print("The coefficient for determination of the exponential model is")
summary(exp_fit)$adj.r.squared
predict(exp_fit, newdata = data.frame(Year = 2022))
predict(d3_fit, newdata = data.frame(Year = 2022))
exp^predict(exp_fit, newdata = data.frame(Year = 2022))
exp(predict(exp_fit, newdata = data.frame(Year = 2022)))
setwd("~/GitHub/30DayChartChallenge/2022")
readr::read_csv("d9_data.csv")
d9_data <- readr::read_csv("d9_data.csv")
knitr::opts_chunk$set(echo = TRUE)
library("ggvenn")
library("tidyverse")
# find institutions that offer math, statistics, or physics majors programs
# better code to capture intersections
d9_data <- d9_data |>
mutate(major = tolower(major)) |>
group_by(institute) |>
mutate(Math = any(str_detect(major, "math")),
Statistics = any(str_detect(major, "statistics")),
Physics = any(str_detect(major, "physics")))
d9_data |>
ggplot() +
ggvenn::geom_venn(aes(A = Math, B = Statistics, C = Physics),
fill_color = c("#DBB165", "#2E604A", "#D1362F")) +
# http://opencolor.tools/palettes/wesanderson/ ... RUSHMORE!
labs(title = "30 Day Chart Challenge, Day 9: Statistics",
subtitle = "US Institutions that Offer these Bachelor's Degree Programs",
caption = "Data Source: US Dept of Education College Scorecard",
x = "",
y = "") +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
#axis.title.x = element_text(size = 15),
#axis.title.y = element_text(size = 15),
#legend.position = "bottom",
panel.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.caption = element_text(color = "#D1362F",
hjust = 0.5,
size = 15),
plot.subtitle = element_text(color = "#DBB165",
hjust = 0.5,
size = 15),
plot.title = element_text(color = "#2E604A",
hjust = 0.5,
size = 20))
d9_data |>
ggplot() +
ggvenn::geom_venn(aes(A = Math, B = Statistics, C = Physics),
fill_color = c("#DBB165", "#2E604A", "#D1362F")) +
# http://opencolor.tools/palettes/wesanderson/ ... RUSHMORE!
labs(title = "30 Day Chart Challenge, Day 9: Statistics",
subtitle = "US Institutions that Offer these Bachelor's Degree Programs",
caption = "Data Source: US Dept of Education College Scorecard",
x = "",
y = "") +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
#axis.title.x = element_text(size = 15),
#axis.title.y = element_text(size = 15),
#legend.position = "bottom",
panel.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.caption = element_text(color = "#D1362F",
hjust = 0.5,
size = 15),
plot.subtitle = element_text(color = "#DBB165",
hjust = 0.5,
size = 15),
plot.title = element_text(color = "#2E604A",
hjust = 0.5,
size = 20))
library("igraph")
library("tidyverse")
# looking at 5 nodes, so let's start with a 5x5 matrix
chorus_mat <- matrix(rep(0, 25, nrow = 5, ncol = 5))
# looking at 5 nodes, so let's start with a 5x5 matrix
chorus_mat <- matrix(rep(0, 25, nrow = 5, ncol = 5))
lyrics <- c("You spin me", "right", "'round", "baby", "like a record")
rownames(chorus_mat) <- lyrics
# looking at 5 nodes, so let's start with a 5x5 matrix
chorus_mat <- matrix(rep(0, 25, nrow = 5, ncol = 5))
lyrics <- c("You spin me", "right", "'round", "baby", "like a record")
rownames(chorus_mat) <- lyrics
# looking at 5 nodes, so let's start with a 5x5 matrix
chorus_mat <- matrix(rep(0, 25, nrow = 5, ncol = 5))
lyrics <- c("You spin me", "right", "'round", "baby", "like a record")
#rownames(chorus_mat) <- lyrics
colnames(chorus_mat) <- lyrics
# looking at 5 nodes, so let's start with a 5x5 matrix
chorus_mat <- matrix(rep(0, 25, nrow = 5, ncol = 5))
chorus_mat
# looking at 5 nodes, so let's start with a 5x5 matrix
chorus_mat <- matrix(rep(0, 25), nrow = 5, ncol = 5)
lyrics <- c("You spin me", "right", "'round", "baby", "like a record")
rownames(chorus_mat) <- lyrics
colnames(chorus_mat) <- lyrics
# filling in a transition matrix and making it row stochastic
chorus_mat["You spin me", "right"] <- 1/1
chorus_mat["right", "'round"] <- 3/3
chorus_mat["'round", "You spin me"] <- 1/5
chorus_mat["'round", "'round"] <- 2/5
chorus_mat["'round", "baby"] <- 1/5
chorus_mat["'round", "like a record"] <- 1/5
chorus_mat["baby", "right"] <- 2/2
chorus_mat["like a record", "You spin me"] <- 1/5
# show matrix to confirm
chorus_mat
quick_graph <- igraph::graph_from_adjacency_matrix(chorus_mat)
plot(quick_graph)
quick_graph <- igraph::graph_from_adjacency_matrix(chorus_mat)
plot(quick_graph,
edge.width = E(quick_graph)$weight,
edge.label = E(quick_graph)$weight)
quick_graph <- igraph::graph_from_adjacency_matrix(chorus_mat)
plot(quick_graph,
edge.width = E(quick_graph)$weight,
edge.label = E(quick_graph)$weight)
?graph_from_adjacency_matrix
quick_graph <- igraph::graph_from_adjacency_matrix(chorus_mat,
mode = "directed",
weighted = "weight")
plot(quick_graph,
edge.width = E(quick_graph)$weight,
edge.label = E(quick_graph)$weight)
install.packages("ggnetwork")
library("ggnetwork")
ggnetwork(chorus_mat)
?ggnetwork
df_for_gg_network <- ggnetwork(chorus_mat)
df_for_gg_network <- ggnetwork(chorus_mat)
df_for_gg_network |>
ggplot()
df_for_gg_network <- ggnetwork(chorus_mat)
df_for_gg_network |>
ggplot() +
geom_edges(color = "purple")
df_for_gg_network <- ggnetwork(chorus_mat)
df_for_gg_network |>
ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(color = "purple")
df_for_gg_network <- ggnetwork(chorus_mat)
df_for_gg_network |>
ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(color = "purple") +
geom_nodelabel()
df_for_gg_network <- ggnetwork(chorus_mat)
df_for_gg_network |>
ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(color = "purple") +
geom_nodelabel(label = vertex.names)
df_for_gg_network <- ggnetwork(chorus_mat)
df_for_gg_network |>
ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(color = "purple") +
geom_nodelabel(label = lyrics[vertex.names])
df_for_gg_network <- ggnetwork(chorus_mat)
df_for_gg_network |>
ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(color = "purple") +
geom_nodelabel(aes(label = vertex.names])
df_for_gg_network <- ggnetwork(chorus_mat)
df_for_gg_network |>
ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(color = "purple") +
geom_nodelabel(aes(label = vertex.names)
df_for_gg_network <- ggnetwork(chorus_mat)
df_for_gg_network |>
ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(color = "purple") +
geom_nodelabel(aes(label = vertex.names))
# looking at 5 nodes, so let's start with a 5x5 matrix
chorus_mat <- matrix(rep(0, 25), nrow = 5, ncol = 5)
lyrics <- c("You spin me", "right", "'round", "baby", "like a record")
rownames(chorus_mat) <- lyrics
colnames(chorus_mat) <- lyrics
# filling in a transition matrix and making it row stochastic
chorus_mat["You spin me", "right"] <- 1/1
chorus_mat["right", "'round"] <- 3/3
chorus_mat["'round", "You spin me"] <- 1/5
chorus_mat["'round", "'round"] <- 2/5
chorus_mat["'round", "baby"] <- 1/5
chorus_mat["'round", "like a record"] <- 1/5
chorus_mat["baby", "right"] <- 2/2
chorus_mat["like a record", "baby"] <- 1/5
# show matrix to confirm
chorus_mat
quick_graph <- igraph::graph_from_adjacency_matrix(chorus_mat,
mode = "directed",
weighted = "weight")
plot(quick_graph,
edge.width = E(quick_graph)$weight,
edge.label = E(quick_graph)$weight)
plot(quick_graph,
edge.width = E(quick_graph)$weight,
edge.label = E(quick_graph)$weight)
quick_graph <- igraph::graph_from_adjacency_matrix(chorus_mat,
mode = "directed",
weighted = "weight")
plot(quick_graph,
edge.width = E(quick_graph)$weight,
edge.label = E(quick_graph)$weight,
vertex.size = 5)
quick_graph <- igraph::graph_from_adjacency_matrix(chorus_mat,
mode = "directed",
weighted = "weight")
plot(quick_graph,
edge.width = E(quick_graph)$weight,
edge.label = E(quick_graph)$weight,
vertex.size = 5)
quick_graph <- igraph::graph_from_adjacency_matrix(chorus_mat,
mode = "directed",
weighted = "weight")
plot(quick_graph,
edge.width = E(quick_graph)$weight,
edge.label = E(quick_graph)$weight,
vertex.size = 25)
quick_graph <- igraph::graph_from_adjacency_matrix(chorus_mat,
mode = "directed",
weighted = "weight")
plot(quick_graph,
edge.width = E(quick_graph)$weight,
edge.label = E(quick_graph)$weight,
vertex.size = 100)
quick_graph <- igraph::graph_from_adjacency_matrix(chorus_mat,
mode = "directed",
weighted = "weight")
plot(quick_graph,
edge.width = E(quick_graph)$weight,
edge.label = E(quick_graph)$weight,
vertex.size = 50)
quick_graph <- igraph::graph_from_adjacency_matrix(chorus_mat,
mode = "directed",
weighted = "weight")
plot(quick_graph,
edge.width = E(quick_graph)$weight,
edge.label = E(quick_graph)$weight,
vertex.color = "gray75",
vertex.size = 50)
plot(quick_graph,
edge.width = E(quick_graph)$weight,
edge.label = E(quick_graph)$weight,
vertex.color = "gray75",
vertex.size = 50)
plot(quick_graph,
edge.width = E(quick_graph)$weight,
edge.label = E(quick_graph)$weight,
vertex.color = "gray75",
vertex.size = 50)
plot(quick_graph,
edge.width = E(quick_graph)$weight,
edge.label = E(quick_graph)$weight,
vertex.color = "gray75",
vertex.size = 50)
plot(quick_graph,
edge.width = E(quick_graph)$weight,
edge.label = E(quick_graph)$weight,
vertex.color = "gray75",
vertex.size = 50)
plot(quick_graph,
edge.width = E(quick_graph)$weight,
edge.label = E(quick_graph)$weight,
vertex.color = "gray75",
vertex.size = 50)
plot(quick_graph,
edge.width = E(quick_graph)$weight,
edge.label = E(quick_graph)$weight,
vertex.color = "gray75",
vertex.size = 50)
plot(quick_graph,
edge.width = E(quick_graph)$weight,
edge.label = E(quick_graph)$weight,
vertex.color = "gray75",
vertex.size = 50)
plot(quick_graph,
edge.width = E(quick_graph)$weight,
edge.label = E(quick_graph)$weight,
vertex.color = "gray75",
vertex.size = 50)
# looking at 5 nodes, so let's start with a 5x5 matrix
chorus_mat <- matrix(rep(0, 25), nrow = 5, ncol = 5)
lyrics <- c("You spin me", "right", "'round", "baby", "like a record")
rownames(chorus_mat) <- lyrics
colnames(chorus_mat) <- lyrics
# filling in a transition matrix and making it row stochastic
chorus_mat["You spin me", "right"] <- 1/1
chorus_mat["right", "'round"] <- 3/3
chorus_mat["'round", "You spin me"] <- 1/5
chorus_mat["'round", "'round"] <- 2/5
chorus_mat["'round", "baby"] <- 1/5
chorus_mat["'round", "like a record"] <- 1/5
chorus_mat["baby", "right"] <- 2/2
chorus_mat["like a record", "baby"] <- 1/1
# show matrix to confirm
chorus_mat
quick_graph <- igraph::graph_from_adjacency_matrix(chorus_mat,
mode = "directed",
weighted = "weight")
plot(quick_graph,
edge.width = E(quick_graph)$weight,
edge.label = E(quick_graph)$weight,
vertex.color = "gray75",
vertex.size = 50)
plot(quick_graph,
edge.width = E(quick_graph)$weight,
edge.label = E(quick_graph)$weight,
vertex.color = "gray75",
vertex.size = 50)
