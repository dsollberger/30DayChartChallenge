theme(#axis.text.x = element_blank(),
#axis.text.y = element_blank(),
#axis.ticks = element_blank(),
legend.position = "bottom",
panel.background = element_rect(fill = alpha("antiquewhite2", 0.5)),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.subtitle = element_text(color = "blue", hjust = 0.5, size = 10),
plot.title = element_text(color = "red", hjust = 0.5, size = 15))
sf_crime_data |>
ggplot() +
geom_segment(aes(x = year, y = prop_crime_rate,
xend = year[n], yend = prop_crime_rate[n],
color = slope),
size = 2) +
geom_point(aes(x = year, y = prop_crime_rate, color = slope), size = 6) +
scale_color_continuous(low = "blue", high = "red") +
scale_x_discrete(breaks = 2014:2022,
labels = toString(2014:2022)) +
labs(title = "Property Crime in San Francisco",
subtitle = "30 Day Chart Challenge, Day 5: Slopes",
caption = "Data Source: sfgov.org, Uniform Crime Reporting\n(intentionally bad graph)",
x = "Year",
y = "Property Crimes per Week") +
theme(#axis.text.x = element_blank(),
#axis.text.y = element_blank(),
#axis.ticks = element_blank(),
legend.position = "bottom",
panel.background = element_rect(fill = alpha("antiquewhite2", 0.5)),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.subtitle = element_text(color = "blue", hjust = 0.5, size = 10),
plot.title = element_text(color = "red", hjust = 0.5, size = 15))
sf_crime_data |>
ggplot() +
geom_segment(aes(x = year, y = prop_crime_rate,
xend = year[n], yend = prop_crime_rate[n],
color = slope),
size = 2) +
geom_point(aes(x = year, y = prop_crime_rate, color = slope), size = 6) +
scale_color_continuous(low = "blue", high = "red") +
scale_x_discrete(breaks = 2014:2022,
labels = paste(toString(2014:2022), sep = ", ") +
labs(title = "Property Crime in San Francisco",
subtitle = "30 Day Chart Challenge, Day 5: Slopes",
caption = "Data Source: sfgov.org, Uniform Crime Reporting\n(intentionally bad graph)",
x = "Year",
y = "Property Crimes per Week") +
theme(#axis.text.x = element_blank(),
#axis.text.y = element_blank(),
#axis.ticks = element_blank(),
legend.position = "bottom",
panel.background = element_rect(fill = alpha("antiquewhite2", 0.5)),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.subtitle = element_text(color = "blue", hjust = 0.5, size = 10),
plot.title = element_text(color = "red", hjust = 0.5, size = 15))
sf_crime_data |>
ggplot() +
geom_segment(aes(x = year, y = prop_crime_rate,
xend = year[n], yend = prop_crime_rate[n],
color = slope),
size = 2) +
geom_point(aes(x = year, y = prop_crime_rate, color = slope), size = 6) +
scale_color_continuous(low = "blue", high = "red") +
scale_x_discrete(breaks = 2014:2022,
labels = paste(toString(2014:2022), sep = ", ")) +
labs(title = "Property Crime in San Francisco",
subtitle = "30 Day Chart Challenge, Day 5: Slopes",
caption = "Data Source: sfgov.org, Uniform Crime Reporting\n(intentionally bad graph)",
x = "Year",
y = "Property Crimes per Week") +
theme(#axis.text.x = element_blank(),
#axis.text.y = element_blank(),
#axis.ticks = element_blank(),
legend.position = "bottom",
panel.background = element_rect(fill = alpha("antiquewhite2", 0.5)),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.subtitle = element_text(color = "blue", hjust = 0.5, size = 10),
plot.title = element_text(color = "red", hjust = 0.5, size = 15))
sf_crime_data |>
ggplot() +
geom_segment(aes(x = year, y = prop_crime_rate,
xend = year[n], yend = prop_crime_rate[n],
color = slope),
size = 2) +
geom_point(aes(x = year, y = prop_crime_rate, color = slope), size = 6) +
scale_color_continuous(low = "blue", high = "red") +
scale_x_discrete(breaks = 2014:2022,
labels = paste0(toString(2014:2022), sep = ", ")) +
labs(title = "Property Crime in San Francisco",
subtitle = "30 Day Chart Challenge, Day 5: Slopes",
caption = "Data Source: sfgov.org, Uniform Crime Reporting\n(intentionally bad graph)",
x = "Year",
y = "Property Crimes per Week") +
theme(#axis.text.x = element_blank(),
#axis.text.y = element_blank(),
#axis.ticks = element_blank(),
legend.position = "bottom",
panel.background = element_rect(fill = alpha("antiquewhite2", 0.5)),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.subtitle = element_text(color = "blue", hjust = 0.5, size = 10),
plot.title = element_text(color = "red", hjust = 0.5, size = 15))
paste0(toString(2014:2022), sep = ", ")
paste(toString(2014:2022), sep = ", ")
sf_crime_data |>
ggplot() +
geom_segment(aes(x = year, y = prop_crime_rate,
xend = year[n], yend = prop_crime_rate[n],
color = slope),
size = 2) +
geom_point(aes(x = year, y = prop_crime_rate, color = slope), size = 6) +
scale_color_continuous(low = "blue", high = "red") +
scale_x_discrete(breaks = 2014:2022,
labels = stringr::str_split(toString(2014:2022), sep = ", ")) +
labs(title = "Property Crime in San Francisco",
subtitle = "30 Day Chart Challenge, Day 5: Slopes",
caption = "Data Source: sfgov.org, Uniform Crime Reporting\n(intentionally bad graph)",
x = "Year",
y = "Property Crimes per Week") +
theme(#axis.text.x = element_blank(),
#axis.text.y = element_blank(),
#axis.ticks = element_blank(),
legend.position = "bottom",
panel.background = element_rect(fill = alpha("antiquewhite2", 0.5)),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.subtitle = element_text(color = "blue", hjust = 0.5, size = 10),
plot.title = element_text(color = "red", hjust = 0.5, size = 15))
sf_crime_data |>
ggplot() +
geom_segment(aes(x = year, y = prop_crime_rate,
xend = year[n], yend = prop_crime_rate[n],
color = slope),
size = 2) +
geom_point(aes(x = year, y = prop_crime_rate, color = slope), size = 6) +
scale_color_continuous(low = "blue", high = "red") +
scale_x_discrete(breaks = 2014:2022,
labels = stringr::str_split(toString(2014:2022), ", ")) +
labs(title = "Property Crime in San Francisco",
subtitle = "30 Day Chart Challenge, Day 5: Slopes",
caption = "Data Source: sfgov.org, Uniform Crime Reporting\n(intentionally bad graph)",
x = "Year",
y = "Property Crimes per Week") +
theme(#axis.text.x = element_blank(),
#axis.text.y = element_blank(),
#axis.ticks = element_blank(),
legend.position = "bottom",
panel.background = element_rect(fill = alpha("antiquewhite2", 0.5)),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.subtitle = element_text(color = "blue", hjust = 0.5, size = 10),
plot.title = element_text(color = "red", hjust = 0.5, size = 15))
sf_crime_data |>
ggplot() +
geom_segment(aes(x = year, y = prop_crime_rate,
xend = year[n], yend = prop_crime_rate[n],
color = slope),
size = 2) +
geom_point(aes(x = year, y = prop_crime_rate, color = slope), size = 6) +
scale_color_continuous(low = "blue", high = "red") +
#scale_x_discrete(breaks = 2014:2022,
labels = stringr::str_split(toString(2014:2022), ", ")) +
sf_crime_data |>
ggplot() +
geom_segment(aes(x = year, y = prop_crime_rate,
xend = year[n], yend = prop_crime_rate[n],
color = slope),
size = 2) +
geom_point(aes(x = year, y = prop_crime_rate, color = slope), size = 6) +
scale_color_continuous(low = "blue", high = "red") +
#scale_x_discrete(breaks = 2014:2022,
#                 labels = stringr::str_split(toString(2014:2022), ", ")) +
labs(title = "Property Crime in San Francisco",
subtitle = "30 Day Chart Challenge, Day 5: Slopes",
caption = "Data Source: sfgov.org, Uniform Crime Reporting\n(intentionally bad graph)",
x = "Year",
y = "Property Crimes per Week") +
theme(#axis.text.x = element_blank(),
#axis.text.y = element_blank(),
#axis.ticks = element_blank(),
legend.position = "bottom",
panel.background = element_rect(fill = alpha("antiquewhite2", 0.5)),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.subtitle = element_text(color = "blue", hjust = 0.5, size = 10),
plot.title = element_text(color = "red", hjust = 0.5, size = 15))
sf_crime_data |>
ggplot() +
geom_segment(aes(x = year, y = prop_crime_rate,
xend = year[n], yend = prop_crime_rate[n],
color = slope),
size = 2) +
geom_point(aes(x = year, y = prop_crime_rate, color = slope), size = 6) +
scale_color_continuous(low = "blue", high = "red") +
#scale_x_discrete(breaks = 2014:2022,
#                 labels = stringr::str_split(toString(2014:2022), ", ")) +
labs(title = "Property Crime in San Francisco",
subtitle = "30 Day Chart Challenge, Day 5: Slopes",
caption = "Data Source: sfgov.org, Uniform Crime Reporting\n(intentionally bad graph)",
x = "Year",
y = "Property Crimes per Week") +
theme(#axis.text.x = element_blank(),
#axis.text.y = element_blank(),
#axis.ticks = element_blank(),
legend.position = "bottom",
panel.background = element_rect(fill = alpha("antiquewhite2", 0.5)),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.subtitle = element_text(color = "blue", hjust = 0.5, size = 10),
plot.title = element_text(color = "red", hjust = 0.5, size = 15))
usethis::edit_r_profile()
usethis::edit_r_profile()
?print
knitr::opts_chunk$set(echo = TRUE)
library("tidyverse")
df <- readr::read_csv("transistors-per-microprocessor.csv")
df <- readr::read_csv("transistors-per-microprocessor.csv")
View(df)
df <- df |>
mutate(TPM = `Transistors per microprocessor`)
View(df)
df |>
ggplot() +
geom_line(aes(x = Year, y = TPM))
df |>
ggplot() +
geom_point(aes(x = Year, y = TPM))
df |>
ggplot() +
geom_point(aes(x = Year, y = TPM)) +
labs(title = "Moore's Law",
subtitle = "said that the number of transistors in an integrated\n
circuit doubles approximately every two years")
df |>
ggplot() +
geom_point(aes(x = Year, y = TPM)) +
labs(title = "Moore's Law",
subtitle = "said that the number of transistors in an integrated\n
circuit doubles approximately every two years",
caption = "Data Source: Our World in Data",
x = "year", y = "transistors per microprocessor")
df |>
ggplot() +
geom_point(aes(x = Year, y = TPM)) +
labs(title = "Moore's Law",
subtitle = "said that the number of transistors in an integrated\n
circuit doubles approximately every two years",
caption = "Data Source: Our World in Data",
x = "year", y = "transistors per microprocessor") +
theme(#axis.text.x = element_blank(),
#axis.text.y = element_blank(),
#axis.ticks = element_blank(),
legend.position = "bottom",
panel.background = element_rect(fill = alpha("#23ADAD", 0.5)),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.subtitle = element_text(color = "blue",
hjust = 0.5,
size = 15),
plot.title = element_text(color = "red",
hjust = 0.5,
size = 20))
df |>
ggplot() +
geom_point(aes(x = Year, y = TPM),
size = 4) +
labs(title = "Moore's Law",
subtitle = "said that the number of transistors in an integrated\n
circuit doubles approximately every two years",
caption = "Data Source: Our World in Data",
x = "year", y = "transistors per microprocessor") +
theme(#axis.text.x = element_blank(),
#axis.text.y = element_blank(),
#axis.ticks = element_blank(),
legend.position = "bottom",
panel.background = element_rect(fill = alpha("#23ADAD", 0.5)),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.subtitle = element_text(color = "blue",
hjust = 0.5,
size = 15),
plot.title = element_text(color = "red",
hjust = 0.5,
size = 20))
baseplot <- df |>
ggplot() +
geom_point(aes(x = Year, y = TPM),
size = 4) +
labs(title = "Moore's Law",
subtitle = "said that the number of transistors in an integrated\n
circuit doubles approximately every two years",
caption = "Data Source: Our World in Data",
x = "year", y = "transistors per microprocessor") +
theme(#axis.text.x = element_blank(),
#axis.text.y = element_blank(),
#axis.ticks = element_blank(),
legend.position = "bottom",
panel.background = element_rect(fill = alpha("#23ADAD", 0.5)),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.subtitle = element_text(color = "blue",
hjust = 0.5,
size = 15),
plot.title = element_text(color = "red",
hjust = 0.5,
size = 20))
baseplot
baseplot <- df |>
ggplot() +
geom_point(aes(x = Year, y = TPM),
size = 4) +
labs(title = "Moore's Law",
subtitle = "said that the number of transistors in an integrated\n
circuit doubles approximately every two years",
caption = "Data Source: Our World in Data",
x = "year", y = "transistors per microprocessor") +
theme(#axis.text.x = element_blank(),
#axis.text.y = element_blank(),
#axis.ticks = element_blank(),
legend.position = "bottom",
panel.background = element_rect(fill = alpha("gray10", 0.5)),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.subtitle = element_text(color = "blue",
hjust = 0.5,
size = 15),
plot.title = element_text(color = "red",
hjust = 0.5,
size = 20))
baseplot
baseplot <- df |>
ggplot() +
geom_point(aes(x = Year, y = TPM),
size = 4) +
labs(title = "Moore's Law",
subtitle = "said that the number of transistors in an integrated\n
circuit doubles approximately every two years",
caption = "Data Source: Our World in Data",
x = "year", y = "transistors per microprocessor") +
theme(#axis.text.x = element_blank(),
#axis.text.y = element_blank(),
#axis.ticks = element_blank(),
legend.position = "bottom",
panel.background = element_rect(fill = alpha("gray90", 0.5)),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.subtitle = element_text(color = "blue",
hjust = 0.5,
size = 15),
plot.title = element_text(color = "red",
hjust = 0.5,
size = 20))
baseplot
baseplot +
geom_smooth(method = "lm")
baseplot <- df |>
ggplot(aes(x = Year, y = TPM)) +
geom_point(size = 4) +
labs(title = "Moore's Law",
subtitle = "said that the number of transistors in an integrated\n
circuit doubles approximately every two years",
caption = "Data Source: Our World in Data",
x = "year", y = "transistors per microprocessor") +
theme(#axis.text.x = element_blank(),
#axis.text.y = element_blank(),
#axis.ticks = element_blank(),
legend.position = "bottom",
panel.background = element_rect(fill = alpha("gray90", 0.5)),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.subtitle = element_text(color = "blue",
hjust = 0.5,
size = 15),
plot.title = element_text(color = "red",
hjust = 0.5,
size = 20))
baseplot +
geom_smooth(method = "lm")
?geom_smooth
lin_fit <- lm(TPM ~ Year, data = df)
summary(lin_fit)
summary(lin_fit)$adj.r.squared
baseplot +
geom_smooth(method = "lm")
lin_fit <- lm(TPM ~ Year, data = df)
summary(lin_fit)
d2_fit <- lm(TPM ~ poly(Year, 2), data = df)
d2_fit <- lm(TPM ~ poly(Year, 2), data = df) #degree 2 polynomial
d3_fit <- lm(TPM ~ poly(Year, 3), data = df) #degree 3 polynomial
baseplot +
geom_smooth(formula = y ~ poly(x,2))
baseplot +
geom_smooth(formula = y ~ poly(x,3))
baseplot +
geom_smooth(formula = y ~ poly(x,2), se = FALSE)
baseplot +
geom_smooth(formula = y ~ poly(x,3), se = FALSE)
exp_fit <- lm(log(TPM) ~ x)
exp_fit <- lm(log(TPM) ~ x, data = df)
exp_fit <- lm(log(TPM) ~ Year, data = df)
baseplot +
geom_smooth(formula = y ~ poly(x,3), se = FALSE)
summary(exp_fit)
summary(d2_fit)
summary(d3_fit)
baseplot +
geom_smooth(formula = log(y) ~ x, se = FALSE)
baseplot +
geom_smooth(formula = y ~ log(x), se = FALSE)
exp_fit <- lm(TPM ~ log(Year), data = df)
summary(exp_fit)
exp_fit <- lm(log(TPM) ~ Year, data = df)
summary(exp_fit)
print("The coefficient for determination of the linear model is")
summary(lin_fit)$adj.r.squared
print("The coefficient for determination of the linear model is")
summary(lin_fit)$adj.r.squared
print("The coefficient for determination of the degree 2 model is")
summary(lin_fit)$adj.r.squared
print("The coefficient for determination of the degree 3 model is")
summary(lin_fit)$adj.r.squared
print("The coefficient for determination of the linear model is")
summary(lin_fit)$adj.r.squared
print("The coefficient for determination of the degree 2 model is")
summary(d2_fit)$adj.r.squared
print("The coefficient for determination of the degree 3 model is")
summary(d3_fit)$adj.r.squared
print("The coefficient for determination of the linear model is")
summary(lin_fit)$adj.r.squared
print("The coefficient for determination of the degree 2 model is")
summary(d2_fit)$adj.r.squared
print("The coefficient for determination of the degree 3 model is")
summary(d3_fit)$adj.r.squared
print("The coefficient for determination of the exponential model is")
summary(exp_fit)$adj.r.squared
predict(exp_fit, newdata = data.frame(Year = 2022))
predict(d3_fit, newdata = data.frame(Year = 2022))
exp^predict(exp_fit, newdata = data.frame(Year = 2022))
exp(predict(exp_fit, newdata = data.frame(Year = 2022)))
setwd("~/GitHub/30DayChartChallenge/2022")
readr::read_csv("d9_data.csv")
d9_data <- readr::read_csv("d9_data.csv")
knitr::opts_chunk$set(echo = TRUE)
library("ggvenn")
library("tidyverse")
# find institutions that offer math, statistics, or physics majors programs
# better code to capture intersections
d9_data <- d9_data |>
mutate(major = tolower(major)) |>
group_by(institute) |>
mutate(Math = any(str_detect(major, "math")),
Statistics = any(str_detect(major, "statistics")),
Physics = any(str_detect(major, "physics")))
d9_data |>
ggplot() +
ggvenn::geom_venn(aes(A = Math, B = Statistics, C = Physics),
fill_color = c("#DBB165", "#2E604A", "#D1362F")) +
# http://opencolor.tools/palettes/wesanderson/ ... RUSHMORE!
labs(title = "30 Day Chart Challenge, Day 9: Statistics",
subtitle = "US Institutions that Offer these Bachelor's Degree Programs",
caption = "Data Source: US Dept of Education College Scorecard",
x = "",
y = "") +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
#axis.title.x = element_text(size = 15),
#axis.title.y = element_text(size = 15),
#legend.position = "bottom",
panel.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.caption = element_text(color = "#D1362F",
hjust = 0.5,
size = 15),
plot.subtitle = element_text(color = "#DBB165",
hjust = 0.5,
size = 15),
plot.title = element_text(color = "#2E604A",
hjust = 0.5,
size = 20))
d9_data |>
ggplot() +
ggvenn::geom_venn(aes(A = Math, B = Statistics, C = Physics),
fill_color = c("#DBB165", "#2E604A", "#D1362F")) +
# http://opencolor.tools/palettes/wesanderson/ ... RUSHMORE!
labs(title = "30 Day Chart Challenge, Day 9: Statistics",
subtitle = "US Institutions that Offer these Bachelor's Degree Programs",
caption = "Data Source: US Dept of Education College Scorecard",
x = "",
y = "") +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
#axis.title.x = element_text(size = 15),
#axis.title.y = element_text(size = 15),
#legend.position = "bottom",
panel.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.caption = element_text(color = "#D1362F",
hjust = 0.5,
size = 15),
plot.subtitle = element_text(color = "#DBB165",
hjust = 0.5,
size = 15),
plot.title = element_text(color = "#2E604A",
hjust = 0.5,
size = 20))
